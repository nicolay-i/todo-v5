#!/usr/bin/env node
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const archiver = require('archiver');

class CapRoverDeployer {
  constructor(config = {}) {
    this.config = {
      appName: config.appName || process.env.CAPROVER_APP_NAME,
      serverUrl: config.serverUrl || process.env.CAPROVER_SERVER_URL,
      appToken: config.appToken || process.env.CAPROVER_APP_TOKEN,
      buildDir: '.next',
      deployFiles: [
        '.next/standalone',
        'public',
        '.next/static',
        'captain-definition',
        'package.json'
      ]
    };
  }

  async build() {
    console.log('üî® –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    return new Promise((resolve, reject) => {
      exec('npm run build', (error, stdout, stderr) => {
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error);
          reject(error);
          return;
        }
        
        console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        console.log(stdout);
        resolve();
      });
    });
  }

  async createDeploymentArchive() {
    console.log('üì¶ –°–æ–∑–¥–∞—é –∞—Ä—Ö–∏–≤ –¥–ª—è –¥–µ–ø–ª–æ—è...');
    
    const output = fs.createWriteStream('deploy.tar');
    const archive = archiver('tar');

    return new Promise((resolve, reject) => {
      output.on('close', () => {
        console.log(`‚úÖ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ${archive.pointer()} –±–∞–π—Ç`);
        resolve();
      });

      archive.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞:', err);
        reject(err);
      });

      archive.pipe(output);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –¥–µ–ø–ª–æ—è
      this.config.deployFiles.forEach(filePath => {
        if (fs.existsSync(filePath)) {
          const stat = fs.statSync(filePath);
          if (stat.isDirectory()) {
            archive.directory(filePath, path.basename(filePath));
          } else {
            archive.file(filePath, { name: path.basename(filePath) });
          }
          console.log(`üìÅ –î–æ–±–∞–≤–ª–µ–Ω: ${filePath}`);
        } else {
          console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        }
      });

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è standalone —Å–±–æ—Ä–∫–∏
      if (fs.existsSync('.next/standalone')) {
        // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ standalone –≤ –∫–æ—Ä–µ–Ω—å –∞—Ä—Ö–∏–≤–∞
        archive.directory('.next/standalone/', false);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if (fs.existsSync('.next/static')) {
          archive.directory('.next/static/', '.next/static');
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        if (fs.existsSync('public')) {
          archive.directory('public/', 'public');
        }
      }

      archive.finalize();
    });
  }

  async deployToCapRover() {
    console.log('üöÄ –î–µ–ø–ª–æ—é –Ω–∞ CapRover...');

    const deployCommand = this.config.appToken 
      ? `caprover deploy -h ${this.config.serverUrl} -a ${this.config.appName} -t ${this.config.appToken}`
      : `caprover deploy -a ${this.config.appName}`;

    return new Promise((resolve, reject) => {
      exec(deployCommand, (error, stdout, stderr) => {
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error);
          reject(error);
          return;
        }
        
        console.log('‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(stdout);
        resolve();
      });
    });
  }

  async deploy() {
    try {
      // –≠—Ç–∞–ø 1: –°–±–æ—Ä–∫–∞
      await this.build();
      
      // –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      // await this.createDeploymentArchive();
      
      // –≠—Ç–∞–ø 3: –î–µ–ø–ª–æ–π
      await this.deployToCapRover();
      
      // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      if (fs.existsSync('deploy.tar')) {
        fs.unlinkSync('deploy.tar');
      }
      
      console.log('üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!');
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–µ–ø–ª–æ—è:', error);
      process.exit(1);
    }
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
const config = {
  appName: 'my-nextjs-app',
  serverUrl: 'https://captain.mydomain.com',
  // appToken: 'your-app-token' // –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
};

// –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è
const deployer = new CapRoverDeployer(config);
deployer.deploy();
