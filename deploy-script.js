#!/usr/bin/env node
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const os = require('os');

// archiver is in devDependencies
let archiver;
try { archiver = require('archiver'); } catch {}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env/.env.local (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç .env.local)
(() => {
  const cwd = process.cwd();
  const envLocalPath = path.join(cwd, '.env.local');
  const envPath = path.join(cwd, '.env');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º .env.local –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç
  let loadedFrom = [];
  try {
    if (fs.existsSync(envPath)) {
      require('dotenv').config({ path: envPath });
      loadedFrom.push('.env');
    }
  } catch {}
  try {
    if (fs.existsSync(envLocalPath)) {
      require('dotenv').config({ path: envLocalPath, override: true });
      loadedFrom.push('.env.local');
    }
  } catch {}
  if (loadedFrom.length) {
    console.log(`üå± –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑: ${loadedFrom.join(', ')}`);
  } else {
    console.log('üå± –§–∞–π–ª—ã .env/.env.local –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  }
})();

class CapRoverDeployer {
  constructor(config = {}) {
    this.config = {
      appName: config.appName || process.env.CAPROVER_APP_NAME,
      serverUrl: config.serverUrl || process.env.CAPROVER_SERVER_URL,
      appToken: config.appToken || process.env.CAPROVER_APP_TOKEN,
    };

    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–µ–ø–ª–æ—è:', JSON.stringify(this.config));
  }

  async build() {
    console.log('üî® –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    return new Promise((resolve, reject) => {
      exec('npm run build', (error, stdout, stderr) => {
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error);
          reject(error);
          return;
        }
        
        console.log('‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        console.log(stdout);
        resolve();
      });
    });
  }

  async copyStaticFiles() {
    console.log('üìÅ –ö–æ–ø–∏—Ä—É—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã...');
    
    const commands = [
      // –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É public
      'cp -r public .next/standalone/ 2>/dev/null || true',
      // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
      'cp -r .next/static .next/standalone/.next/ 2>/dev/null || true'
    ];

    for (const command of commands) {
      console.log(`–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: ${command}`);
      await this.execCommand(command);
    }
    
    console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');
  }

  async testLocal() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é standalone —Å–±–æ—Ä–∫—É –ª–æ–∫–∞–ª—å–Ω–æ...');
    
    return new Promise((resolve, reject) => {
      console.log('–ó–∞–ø—É—Å–∫ –Ω–∞ http://localhost:3000');
      console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
      
      const server = exec('cd .next/standalone && node server.js', (error, stdout, stderr) => {
        if (error && error.signal !== 'SIGTERM') {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
          reject(error);
          return;
        }
        resolve();
      });
      
      server.stdout.on('data', (data) => {
        console.log(data.toString());
      });
      
      server.stderr.on('data', (data) => {
        console.error(data.toString());
      });
    });
  }

  async deployToCapRover() {
    console.log('üöÄ –î–µ–ø–ª–æ—é –Ω–∞ CapRover...');

    // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω archiver, —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π tar —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏,
    // —á—Ç–æ–±—ã —Å–±–æ—Ä–∫–∞ –Ω–µ —à–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ —Ç–æ—á–Ω–æ –≤–∫–ª—é—á–∞–ª–∞ .next/*
    const canPack = Boolean(archiver);
  const cwd = process.cwd();
  const tarPath = path.join(cwd, `caprover-deploy.tar`);
  try { if (fs.existsSync(tarPath)) fs.unlinkSync(tarPath); } catch {}

    if (canPack) {
      await this.ensureBuildArtifacts();
      await this.createTarball({
        tarPath,
        include: [
          { type: 'file', abs: path.join(cwd, 'captain-definition'), dest: 'captain-definition' },
          { type: 'dir', abs: path.join(cwd, '.next', 'standalone'), dest: '.next/standalone' },
          { type: 'dir', abs: path.join(cwd, '.next', 'static'), dest: '.next/static' },
          { type: 'dir', abs: path.join(cwd, 'public'), dest: 'public' },
          // –î–æ–±–∞–≤–∏–º package.json –∏ lock —Ñ–∞–π–ª—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
          { type: 'file', abs: path.join(cwd, 'package.json'), dest: 'package.json' },
          { type: 'file-optional', abs: path.join(cwd, 'pnpm-lock.yaml'), dest: 'pnpm-lock.yaml' },
          { type: 'file-optional', abs: path.join(cwd, 'package-lock.json'), dest: 'package-lock.json' },
          { type: 'file-optional', abs: path.join(cwd, 'yarn.lock'), dest: 'yarn.lock' },
        ]
      });

      const tarRel = path.basename(tarPath);
      const deployCommand = this.config.appToken
        ? `caprover deploy -h ${this.config.serverUrl} -a ${this.config.appName} --appToken ${this.config.appToken} -t ${tarRel}`
        : `caprover deploy -a ${this.config.appName} -t ${tarRel}`;

      console.log(`–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: ${deployCommand}`);
      try {
        return await this.execCommand(deployCommand);
      } finally {
        // –ß–∏—Å—Ç–∏–º –∞—Ä—Ö–∏–≤
        try { fs.unlinkSync(tarPath); } catch {}
      }
    }

    // fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const deployCommand = this.config.appToken 
      ? `caprover deploy -h ${this.config.serverUrl} -a ${this.config.appName} --appToken ${this.config.appToken}`
      : `caprover deploy -a ${this.config.appName}`;
    console.log(`–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: ${deployCommand}`);
    return this.execCommand(deployCommand);
  }

  async ensureBuildArtifacts() {
    const standalone = path.join(process.cwd(), '.next', 'standalone');
    const staticDir = path.join(process.cwd(), '.next', 'static');
    const capDef = path.join(process.cwd(), 'captain-definition');

    const missing = [];
    if (!fs.existsSync(capDef)) missing.push('captain-definition');
    if (!fs.existsSync(standalone)) missing.push('.next/standalone');
    if (!fs.existsSync(staticDir)) missing.push('.next/static');

    if (missing.length) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏: ${missing.join(', ')}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω next build.`);
    }
  }

  async createTarball({ tarPath, include }) {
    console.log(`üì¶ –£–ø–∞–∫–æ–≤—ã–≤–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–ø–ª–æ—è: ${tarPath}`);
    await new Promise((resolve, reject) => {
      const output = fs.createWriteStream(tarPath);
      const archive = archiver('tar', { gzip: false });
      output.on('close', resolve);
      output.on('error', reject);
      archive.on('error', reject);
      archive.pipe(output);

      for (const entry of include) {
        const exists = fs.existsSync(entry.abs);
        if (!exists && entry.type === 'file-optional') continue;
        if (!exists) throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –ø—É—Ç—å –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏: ${entry.abs}`);
        if (entry.type === 'file' || entry.type === 'file-optional') {
          archive.file(entry.abs, { name: entry.dest });
        } else if (entry.type === 'dir') {
          archive.directory(entry.abs, entry.dest);
        }
      }

      archive.finalize();
    });
  }

  async execCommand(command) {
    return new Promise((resolve, reject) => {
      exec(command, { maxBuffer: 10 * 1024 * 1024 }, (error, stdout, stderr) => {
        if (error) {
          // –ü–µ—á–∞—Ç–∞–µ–º stdout/stderr –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          if (stdout) console.log(stdout);
          if (stderr) console.error(stderr);
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${command}`, error);
          reject(error);
          return;
        }
        if (stdout) console.log(stdout);
        if (stderr) console.error(stderr);
        resolve(stdout);
      });
    });
  }

  async deploy() {
    try {
      // –≠—Ç–∞–ø 1: –°–±–æ—Ä–∫–∞
  await this.build();
      
      // –≠—Ç–∞–ø 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  // –ù–∞ —ç—Ç–∞–ø–µ –æ–±—Ä–∞–∑–∞ –æ–Ω–∏ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è Dockerfile'–æ–º –∏–∑ .next/static –∏ public
      
      // –≠—Ç–∞–ø 3: –î–µ–ø–ª–æ–π
      await this.deployToCapRover();
      
      console.log('üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!');
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–µ–ø–ª–æ—è:', error);
      process.exit(1);
    }
  }

  async testStandalone() {
    try {
      // –≠—Ç–∞–ø 1: –°–±–æ—Ä–∫–∞
      await this.build();
      
      // –≠—Ç–∞–ø 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
      await this.copyStaticFiles();
      
      // –≠—Ç–∞–ø 3: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      await this.testLocal();
      
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      process.exit(1);
    }
  }
}

const deployer = new CapRoverDeployer({});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
const mode = process.argv[2];

if (mode === 'test') {
  // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: node deploy-script.js test
  deployer.testStandalone();
} else {
  // –î–ª—è –¥–µ–ø–ª–æ—è: node deploy-script.js
  deployer.deploy();
}
